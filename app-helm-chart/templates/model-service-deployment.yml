apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.modelService.dns-name }}-config-{{ .Values.modelService.stable.versionLabel }}
  labels:
    app: {{ .Values.modelService.dns-name }}
    version: {{ .Values.modelService.stable.versionLabel }}
data:
  {{- range $key, $val := .Values.modelService.stable.config }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.modelService.dns-name }}-deployment-{{ .Values.modelService.stable.versionLabel }}
  labels:
    app: {{ .Values.modelService.dns-name }}
spec:
  replicas: {{ .Values.modelService.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.modelService.dns-name }}
      version: {{ .Values.modelService.stable.versionLabel }}
  template:
    metadata:
      labels:
        app: {{ .Values.modelService.dns-name }}
        version: {{ .Values.modelService.stable.versionLabel }}
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.modelService.dns-name }}
          image: "{{ .Values.modelService.image.repository }}:{{ .Values.modelService.stable.image.tag }}"
          imagePullPolicy: {{ .Values.modelService.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.modelService.port }}
          envFrom:
            - configMapRef:
                name: {{ .Values.modelService.dns-name }}-config-{{ .Values.modelService.stable.versionLabel }}
          # env:
          #   - name: SECRETS_FILE
          #     value: "/etc/model-secrets/example-secret.txt" # Path where the secret file is mounted
          volumeMounts:
            - name: model-cache-storage
              mountPath: /root/.cache
            # - name: model-secrets-volume
            #   mountPath: /etc/model-secrets
            #   readOnly: true
      volumes:
        - name: model-cache-storage
          persistentVolumeClaim:
            claimName: model-cache-pvc-{{ .Values.modelService.stable.versionLabel }}
        # - name: model-secrets-volume
        #   secret:
        #     secretName: {{ .Values.modelService.secretName | default "example-secret" }}
        #     items:
        #     - key: example-secret.txt # This key MUST exist in the secret
        #       path: example-secret.txt
---
{{- if .Values.modelService.canary.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.modelService.dns-name }}-config-{{ .Values.modelService.canary.versionLabel }}
  labels:
    app: {{ .Values.modelService.dns-name }}
    version: {{ .Values.modelService.canary.versionLabel }}
data:
  {{- range $key, $val := .Values.modelService.canary.config }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.modelService.dns-name }}-deployment-{{ .Values.modelService.canary.versionLabel }}
  labels:
    app: {{ .Values.modelService.dns-name }}
spec:
  replicas: {{ .Values.modelService.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.modelService.dns-name }}
      version: {{ .Values.modelService.canary.versionLabel }}
  template:
    metadata:
      labels:
        app: {{ .Values.modelService.dns-name }}
        version: {{ .Values.modelService.canary.versionLabel }}
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.modelService.dns-name }}
          image: "{{ .Values.modelService.image.repository }}:{{ .Values.modelService.canary.image.tag }}"
          imagePullPolicy: {{ .Values.modelService.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.modelService.port }}
          envFrom:
            - configMapRef:
                name: {{ .Values.modelService.dns-name }}-config-{{ .Values.modelService.canary.versionLabel }}
          # env:
          #   - name: SECRETS_FILE
          #     value: "/etc/model-secrets/example-secret.txt" # Path where the secret file is mounted
          volumeMounts:
            - name: model-cache-storage
              mountPath: /root/.cache
            # - name: model-secrets-volume
            #   mountPath: /etc/model-secrets
            #   readOnly: true
      volumes:
        - name: model-cache-storage
          persistentVolumeClaim:
            claimName: model-cache-pvc-{{ .Values.modelService.canary.versionLabel }}
        # - name: model-secrets-volume
        #   secret:
        #     secretName: {{ .Values.modelService.secretName | default "example-secret" }}
        #     items:
        #     - key: example-secret.txt # This key MUST exist in the secret
        #       path: example-secret.txt
{{- end }}